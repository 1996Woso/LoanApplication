@rendermode InteractiveServer
@inject Services.Calculations calculate
<div class="card w-50 mx-auto" style="min-width:25rem">
    <div class="card-header text-center" style="background-color:lightblue">
        <h2>Bond Repayment Calculator</h2>
        @* <hr style="height:0.5rem;" /> *@
    </div>
    <div class="card-body">
        <EditForm Model="model">
            <DataAnnotationsValidator />
            @if (model != null)
            {
                <div class="container">
                    <div class="row">
                        <div class="mb-2 col-md-6 form-floating">
                            @* <input type="number" @bind="model.P" @bind:event ="oninput" class="form-control"/> *@
                            <InputNumber @bind-Value="model.P" @oninput="@(e => calculate.OnInputDecimal(e, value => model.P = value,model))" class="form-control" />
                            <label>Purchase Price (R)</label>
                            <ValidationMessage For="() => model.P" class="text-danger" />
                        </div>
                        <div class="mb-2 col-md-6 form-floating">
                            @* <input type="number" @bind="model.x" @bind:event ="oninput" class="form-control"/> *@
                            <InputNumber @bind-Value="model.x" @oninput="@(e => calculate.OnInputDecimal(e, value => model.x = value,model))" class="form-control" />
                            <label>Monthly Payment (R)</label>
                            <ValidationMessage For="() => model.x" class="text-danger" />
                        </div>
                        <div class="mb-2 col-md-6 form-floating">
                            @* <input @bind="model.n" @bind:event ="oninput" class="form-control"/> *@
                            <InputNumber @bind-Value="model.n" @oninput="@(e => calculate.OnInputInteger(e, value => model.n = value,model))" class="form-control" />
                            <label>Period (Years)</label>
                            <ValidationMessage For="() => model.n" class="text-danger" />
                        </div>
                        <div class="mb-2 col-md-6 form-floating">
                            @* <input type="number" @bind="model.i" @bind:event="oninput" class="form-control"/> *@
                            <InputNumber @bind-Value="model.i" @oninput="@(e => calculate.OnInputDecimal(e, value => model.i = value,model))" class="form-control" />
                            <label>Interest Rate (%)</label>
                            <ValidationMessage For="() => model.i" class="text-danger" />
                        </div>
                        <div class="col-md-12 form-floating">
                            @*  <input type="number" @bind ="@model.D" @bind:event = "oninput" class="form-control"/> *@
                            <InputNumber @bind-Value="model.D" class="form-control" />
                            <label>Deposit (R)</label>
                            <ValidationMessage For="() => model.D" class="text-danger" />
                        </div>
                    </div>
                    <div class="mt-2">
                        @* <p>Calculate:</p> *@
                        @if (model.x.HasValue && model.n.HasValue && model.i.HasValue)
                        {
                            <button class="btn btn-success mb-2" @onclick="Amount">Purchase Price</button>
                        }
                        else if (model.x.HasValue && model.n.HasValue && model.P.HasValue)
                        {
                            <button class="btn btn-success mb-2" @onclick="Interest">Interest Rate</button>
                        }
                        else if (model.P.HasValue && model.n.HasValue && model.i.HasValue)
                        {
                            <button class="btn btn-success mb-2" @onclick="Payment">Monthly Payment</button>
                        }
                        else if (model.x.HasValue && model.P.HasValue && model.i.HasValue)
                        {
                            <button class="btn btn-success mb-2" @onclick="Years">Period</button>
                        }
                        @if (model.x.HasValue && model.n.HasValue && model.P.HasValue)
                        {
                            model.T = Math.Round((decimal)(model.x * model.n * 12), 2);
                            model.I = Math.Round((decimal)(model.T - model.P), 2);
                            @if (model.T.HasValue && model.I.HasValue)
                            {
                                <div class="alert alert-info">
                                    <pre>
                                    <i>Total amount repayable</i>  :<b>R @model.T</b>
                                                    </pre>
                                    <pre>
                                    <i>Total interest repayable</i>:<b>R @model.I</b>
                                                    </pre>
                                </div>
                            }
                        }

                    </div>
                </div>
            }
        </EditForm>
    </div>
</div>


@code {
    private Repayable? model = new Repayable();

    public async void Amount()
    {
        if(model != null)
        {
            if (model.x.HasValue && model.n.HasValue && model.i.HasValue)
            {
                model.P = await calculate.PresentValue(model.n.Value, model.i.Value, model.x.Value);
            }
        }
    }
    public async void Payment()
    {
        if(model != null)
        {
            if (model.P.HasValue && model.n.HasValue && model.i.HasValue && model.D.HasValue)
            {
                model.x = await calculate.MonthlyPayment(model.n.Value, model.i.Value, model.P.Value - model.D.Value);
            }
        }
    }

    public void Interest()
    {
    }

    public async void Years()
    {
        if(model != null)
        {
            if (model.P.HasValue && model.x.HasValue && model.i.HasValue && model.D.HasValue)
            {
                model.n = await calculate.Period(model.x.Value, model.i.Value, model.P.Value - model.D.Value);
            }
        }
    }

    private void OnInputYears(ChangeEventArgs e)
    {
        if(model != null)
        {
            if (string.IsNullOrEmpty(e.Value?.ToString()))
            {
                model.n = null;
            }
            if (int.TryParse(e.Value!.ToString(), out int result))
            {
                model.n = result;
            }
        }
    }
}
