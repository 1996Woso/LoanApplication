@rendermode InteractiveServer
<div class="container w-50 container-div">
    <div class="col-md-12 text-md-center">
        <h3>Bond Repayment Calculator</h3>
    </div>
    <EditForm Model="loan">
        <div class="container">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label>Purchase Price (R)</label>
                    <input type="number" @bind="loan.P" @bind:event ="oninput" class="form-control" id="p" />
                </div>
                <div class="col-md-6">
                    <label>Monthly Payment (R)</label>
                    <input type="number" @bind="loan.x" @bind:event ="oninput" class="form-control" id="x" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label>Period (Years)</label>
                    <input @bind="loan.n" @bind:event ="oninput" class="form-control" id="n" />
                </div>
                <div class="col-md-6">
                    <label>Interest Rate (%)</label>
                    <input type="number" @bind="loan.i" @bind:event="oninput" class="form-control" id="i" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-12">
                    <label>Deposit (R)</label>
                    <input type="number" @bind ="@loan.D" @bind:event = "oniput" class="form-control" />
                </div>
            </div>

            <div>
                @* <p>Calculate:</p> *@
                @if (loan.x.HasValue && loan.n.HasValue && loan.i.HasValue)
                {
                    <button class="btn btn-success mb-2" @onclick="Amount">Purchase Price</button>
                }
                else if (loan.x.HasValue && loan.n.HasValue && loan.P.HasValue)
                {
                    <button class="btn btn-success mb-2" @onclick="Interest">Interest Rate</button>
                }
                else if (loan.P.HasValue && loan.n.HasValue && loan.i.HasValue)
                {
                    <button class="btn btn-success mb-2" @onclick="Payment">Monthly Payment</button>
                }
                else if (loan.x.HasValue && loan.P.HasValue && loan.i.HasValue)
                {
                    <button class="btn btn-success mb-2" @onclick="Years">Period</button>
                }
                @if (loan.x.HasValue && loan.n.HasValue && loan.P.HasValue)
                {
                    loan.T = Math.Round((decimal)(loan.x * loan.n * 12),2);
                    loan.I = Math.Round((decimal)(loan.T - loan.P), 2);
                    @if(loan.T.HasValue && loan.I.HasValue)
                    {
                        <div class="alert alert-info">
                            <pre>
                                <i>Total amount repayable</i>  :<b>R @loan.T</b>
                            </pre>
                            <pre>
                                <i>Total interest repayable</i>:<b>R @loan.I</b>
                            </pre>
                        </div>
                    }
                }
                
            </div>
        </div>
    </EditForm>
</div>


@code {
    private HomeLoan? loan = new HomeLoan();

    public void Amount()
    {
        if(loan.x.HasValue && loan.n.HasValue && loan.i.HasValue)
        {
            int n = loan.n.Value * 12;
            decimal i = (loan.i.Value / 100) / 12;
            decimal exp = (decimal)Math.Pow((double)(1 + i), -n);//(1+i)^(-n)
            decimal x = loan.x.Value;
            loan.P = Math.Round((x * (1 - exp)) / i,2);
        }
    }
    public void Payment()
    {
        if(loan.P.HasValue && loan.n.HasValue && loan.i.HasValue)
        {
            int n = loan.n.Value * 12;
            decimal i = (loan.i.Value / 100) / 12;
            decimal exp = (decimal)Math.Pow((double)(1+i),-n);//(1+i)^(-n)
            decimal P = loan.P.Value;
            loan.x = Math.Round((P * i) / (1 - exp),2);
        }
    }

    public void Interest()
    {
    }

    public void Years()
    {
        if(loan.P.HasValue && loan.x.HasValue && loan.i.HasValue)
        {
            decimal i = (loan.i.Value / 100) / 12;
            decimal P = loan.P.Value;
            decimal x = loan.x.Value;
            decimal val1 = (decimal)Math.Log(1-(double)((P*i)/x));// log(1-(P*i)/x)
            decimal val2 = (decimal)Math.Log((double)(1+i));// log(1+i)
            decimal n= Math.Round((decimal)((-val1/val2)/12),0);
            loan.n = (int)n;
        }
    }

    // public void TotalPayment()
    // {
    //     if (loan.x.HasValue && loan.n.HasValue)
    //     {
    //         loan.T = loan.x*loan.n*12; 
    //     }

    //     if(loan.P.HasValue && loan.T.HasValue)
    //     {
    //         loan.I = loan.T - loan.P;
    //     }

    // }
    private sealed class HomeLoan
    {
        public decimal? P { get; set; }//Purchase price
        public decimal? x { get; set; }//Monthly payment
        public int? n { get; set; }//Number of years
        public decimal? i { get; set; }//Interest rate
        public decimal? T { get; set; }//Total payment
        public decimal? I { get; set; }//Interest Payed
        public decimal? D { get; set; }//Deposit
    }
}
