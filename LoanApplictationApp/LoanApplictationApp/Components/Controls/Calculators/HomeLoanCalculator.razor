<div class="container w-50">
    <div class="col-md-12 text-md-center">
        <h3>Home Loan Calculator</h3>
    </div>
    <EditForm Model="loan">
        <div class="container">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label>Purchase Price (P)</label>
                    <InputNumber @bind-Value="loan.P" class="form-control" id="p"></InputNumber>
                </div>
                <div class="col-md-6 form-group">
                    <label>Monthly Payment (x)</label>
                    <InputNumber @bind-Value="loan.x" class="form-control" id="x"></InputNumber>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 mb-3">
                    <label>Years (n)</label>
                    <InputNumber @bind-Value="loan.n" class="form-control" id="n"></InputNumber>
                </div>
                <div class="col-md-6">
                    <label>Interest Rate (i)</label>
                    <InputNumber @bind-Value="loan.i" class="form-control" id="i"></InputNumber>
                </div>
            </div>
            <div>
                <p>Calculate:</p>
                <button class="btn btn-info" @onclick="Amount">P</button>
                <button class="btn btn-info" @onclick="Payment">x</button>
                <button class="btn btn-info" @onclick="Interest">i</button>
                <button class="btn btn-info" @onclick="Years">n</button>
            </div>
        </div>
    </EditForm>
</div>


@code {
    private HomeLoan? loan = new HomeLoan();

    public decimal? P { get; set; }
    public decimal? x { get; set; }
    public decimal? i { get; set; }
    public int? n { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(loan != null)
        {
            P = loan.P;
            x = loan.x;
            n = loan.n;
            i = loan.i/100;
        }

    }
    public void Amount()
    {
        if(x.HasValue && n.HasValue && i.HasValue)
        {
            P =  x.Value * (1 - (decimal)Math.Pow((double)(1 + i.Value), -n.Value)) / i.Value;
        }
    }
    public void Payment()
    {
        if(P.HasValue && n.HasValue && i.HasValue)
        {
            x = (P.Value * i.Value) / (1 - (decimal)Math.Pow((double)(1 + i.Value), -n.Value));
        }
    }

    public void Interest()
    {
    }

    public void Years()
    {
        if(P.HasValue && x.HasValue && i.HasValue)
        {
            double val1 = Math.Log(((double)(P.Value * i.Value)) / (double)(x.Value));// log(1-(P*i)/x)
            double val2 = Math.Log((double)(1+i.Value));// log(1+i)
            n = (int)(-val1/val2);
        }
    }
    private sealed class HomeLoan
    {
        public decimal? P { get; set; }
        public decimal? x { get; set; }
        public int? n { get; set; }
        public decimal? i { get; set; }
    }
}
