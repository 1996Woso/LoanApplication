@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IJSRuntime IJSRuntime
@inject IMessageService messageService
@implements IDisposable 

<div class="container small-box">
    @* @if(messageService.IsFormDisplayed) *@
    @* { *@
        <div class="card">
            <div class="card-header heading-form">
                <p>
                    Assign Role To User
                </p>
            </div>
            <div class="card-body">
                <EditForm Model="assignRoleModel" OnValidSubmit="AssignRole" FormName="assignRole">
                    <DataAnnotationsValidator />
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="assignRoleModel.Email" class="form-control" aria-required="true" placeholder="email" id="email">
                            <option value="">Select Email</option>
                            @foreach (var email in Emails)
                            {
                                <option value="@email">@email</option>
                            }
                        </InputSelect>
                        <label for="Email">Email</label>
                        <ValidationMessage For="() => assignRoleModel.Email" class="validation-msg-font"/>
                    </div>
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="assignRoleModel.Role" class="form-control" aria-required="true" placeholder="role" id="role">
                            <option value="">Select Role</option>
                            @foreach (var role in Roles)
                            {
                                <option value="@role">@role</option>
                            }
                        </InputSelect>
                        <label for="Role">Role</label>
                        <ValidationMessage For="() => assignRoleModel.Role" class="validation-msg-font"/>
                    </div>
                    <button class="btn btn-primary w-100" type="submit">
                        <i class="bi bi-plus-circle"></i> Assign Role
                    </button>
                </EditForm>
            </div>
        </div>
    @* } *@
    @if (!string.IsNullOrEmpty(messageService.InfoMessage))
    {
        <div class="overlay-alert">
            <InfoMessage Message="@messageService.InfoMessage" IsDivDisplayed="true" />
        </div>
    }
    else if (!string.IsNullOrEmpty(messageService.SuccessMessage))
    {
        <div class="overlay-alert">
            <SuccessMessage Message="@messageService.SuccessMessage" IsDivDisplayed="true" />
        </div>
    }
</div>


@code {
    private AssignRoleModel assignRoleModel = new();
    private List<string> Roles = new();
    private List<string> Emails = new();


    protected override async Task OnInitializedAsync()
    {
        Roles = await RoleManager.Roles.Select(x => x.Name ?? "").Distinct().ToListAsync();
        Emails = await UserManager.Users.Select(x => x.UserName ?? "").ToListAsync();

        messageService.Onchange += StateHasChanged;
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (!string.IsNullOrEmpty(SuccessMessage) || !string.IsNullOrEmpty(InfoMessage))
    //     {
    //         await IJSRuntime.InvokeVoidAsync("initializeTimeouts");
    //         IsFormSubmitted = false;
    //     }
    // }

    private async Task AssignRole()
    {
        var user = await UserManager.FindByEmailAsync(assignRoleModel.Email ?? "");
        if (user != null && !string.IsNullOrEmpty(assignRoleModel.Email))
        {
            if(!await UserManager.IsInRoleAsync(user, assignRoleModel.Role ?? ""))
            {
                var result = await UserManager.AddToRoleAsync(user, assignRoleModel.Role ?? "");
                if (result.Succeeded)
                {
                    messageService.Show("", "", $"'{assignRoleModel.Role}' has been added successfully to {user.Name} {user.Surname}.");
                    await messageService.HideAsync();
                    assignRoleModel = new AssignRoleModel();

                }
            }
            else
            {
                messageService.Show("", $"'{assignRoleModel.Role}' has already been assigned to {user.Name} {user.Surname}.", "");
                await messageService.HideAsync();
            }

        }

    }

    public void Dispose()
    {
        messageService.Onchange -= StateHasChanged;
    }

    // [Inject]
    // private UserManager<ApplicationUser>? UserManager { get; set; }

    // [Inject]
    // private RoleManager<IdentityRole>? RoleManager { get; set; }

    public class AssignRoleModel
    {
        [Required(ErrorMessage ="Email is requred.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Role is requred.")]
        public string? Role { get; set; }
    }
}

<script>
    function initializeTimeouts() {
        const errorDiv = document.getElementById('error-div');
        const successDiv = document.getElementById('success-div');
        const infoDiv = document.getElementById('info-div');
        if (errorDiv) {
            errorDiv.classList.remove('fade-out');
            errorDiv.style.display = 'block';
            setTimeout(() => {
                errorDiv.classList.add('fade-out');
                setTimeout(() => {
                    errorDiv.style.display = 'none';
                    // location.reload();
                }, 2500);
            }, 2500);
        }

        if (successDiv) {
            successDiv.classList.remove('fade-out');
            successDiv.style.display = 'block';
            setTimeout(() => {
                successDiv.classList.add('fade-out');
                setTimeout(() => {
                    successDiv.style.display = 'none';
                    // location.reload();
                }, 2500);
            }, 2500);
        }

        if (infoDiv) {
            infoDiv.classList.remove('fade-out');
            infoDiv.style.display = 'block';
            setTimeout(() => {
                infoDiv.classList.add('fade-out');
                setTimeout(() => {
                    infoDiv.style.display = 'none';
                    // location.reload();
                }, 2500);
            }, 2500);
        }
    }
</script>