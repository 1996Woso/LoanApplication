@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IJSRuntime IJSRuntime
@inject IMessageService messageService
@implements IDisposable

<div class="container small-box">
    @if(messageService.IsFormDisplayed)
    {
        <div class="card">
            <div class="card-header heading-form">
                <p>
                    Remove Role From User
                </p>
            </div>
            <div class="card-body">
                <EditForm Model="model" OnValidSubmit="RemoveRole" FormName="removeRole">
                    <DataAnnotationsValidator />
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="model.Email" class="form-control" aria-required="true" placeholder="email">
                            <option value="">Select Email</option>
                            @foreach (var email in Emails)
                            {
                                <option value="@email">@email</option>
                            }
                        </InputSelect>
                        <label for="Email">Email</label>
                        <ValidationMessage For="() => model.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="model.Role" class="form-control" aria-required="true" placeholder="role">
                            <option value="">Select Role</option>
                            @foreach (var role in Roles)
                            {
                                <option value="@role">@role</option>
                            }
                        </InputSelect>
                        <label for="Role">Role</label>
                        <ValidationMessage For="() => model.Role" class="text-danger" />
                    </div>
                    <button class="btn btn-danger w-100" type="submit">
                        <i class="bi bi-x-circle"></i> Remove Role
                    </button>
                </EditForm>
            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(messageService.ErrorMessage))
    {
        <div class="fade-message w-100" id="error-div">
            <ErrorMessage Message="@messageService.ErrorMessage" IsDivDisplayed="true" />
        </div>
    }
    else if (!string.IsNullOrEmpty(messageService.SuccessMessage))
    {
        <div class="fade-message w-100" id="success-div">
            <SuccessMessage Message="@messageService.SuccessMessage" IsDivDisplayed="true" />
        </div>
    }
    else if (!string.IsNullOrEmpty(messageService.InfoMessage))
    {
        <div class="fade-message w-100" id="info-div">
            <InfoMessage Message="@messageService.InfoMessage" IsDivDisplayed="true" />
        </div>
    }
</div>


@code {
    private RemoveRoleModel model = new();
    private ApplicationUser? User;
    private List<string> Roles = new();
    private List<string> Emails = new();

    protected override async Task OnInitializedAsync()
    {
        if(User != null)
        {
            Roles = (await UserManager.GetRolesAsync(User)).ToList();
        }
        else
        {
            Roles = await RoleManager.Roles.Select(x => x.Name ?? "").ToListAsync();
        }
        Emails = await UserManager.Users.Select(x => x.UserName ?? "").ToListAsync();

        messageService.Onchange += StateHasChanged;
    }
    // protected override async Task OnAfterRenderAsync(bool firsRender)
    // {
    //     if (!string.IsNullOrEmpty(ErrorMessage) || !string.IsNullOrEmpty(SuccessMessage) || !string.IsNullOrEmpty(InfoMessage))
    //     {
    //         await IJSRuntime.InvokeVoidAsync("initializeTimeouts");
    //         IsFormSubmitted = false;
    //     }
    // }
    private async Task RemoveRole()
    {
        User = await UserManager.FindByEmailAsync(model.Email ?? "");
        if (!await UserManager.IsInRoleAsync(User, model.Role))
        {
            messageService.Show("", $"'{User.Name} {User.Surname}' is not in role '{model.Role}'.", "");
            await messageService.HideAsync();
            return;
        }
        if(User != null && !string.IsNullOrEmpty(model.Role))
        {
            var result = await UserManager.RemoveFromRoleAsync(User, model.Role);
            if (result.Succeeded)
            {
                messageService.Show("", "", $"'{model.Role}' has been removed successfully from {User.Name} {User.Surname}.");
                await messageService.HideAsync();
            }
            else
            {
                messageService.Show(result.Errors.ToString(),"","");
                await messageService.HideAsync();
                return;
            }  
        }

    }

    public void Dispose()
    {
        messageService.Onchange -= StateHasChanged;
    }
    public class RemoveRoleModel
    {
        [Required(ErrorMessage = "Email is requred.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Role is requred.")]
        public string? Role { get; set; }
    }
}


<script>
    function initializeTimeouts() {
        const errorDiv = document.getElementById('error-div');
        const successDiv = document.getElementById('success-div');
        const infoDiv = document.getElementById('info-div');
        if (errorDiv) {
            errorDiv.classList.remove('fade-out');
            errorDiv.style.display = 'block';
            setTimeout(() => {
                errorDiv.classList.add('fade-out');
                setTimeout(() => {
                    errorDiv.style.display = 'none';
                }, 2500);
            }, 2500);
        }

        if (successDiv) {
            successDiv.classList.remove('fade-out');
            successDiv.style.display = 'block';
            setTimeout(() => {
                successDiv.classList.add('fade-out');
                setTimeout(() => {
                    successDiv.style.display = 'none';
                }, 2500);
            }, 2500);
        }

        if (infoDiv) {
            infoDiv.classList.remove('fade-out');
            infoDiv.style.display = 'block';
            setTimeout(() => {
                infoDiv.classList.add('fade-out');
                setTimeout(() => {
                    infoDiv.style.display = 'none';
                }, 2500);
            }, 2500);
        }
    }
</script>