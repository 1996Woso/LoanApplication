@page "/Account/ResendEmailConfirmation"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using LoanApplictationApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@*Service to send email*@
@inject Services.SmtpEmailSender emailService
<PageTitle>Resend email confirmation</PageTitle>

<div class="card">
    <div class="card-header" style="background-color:floralwhite;color:black">
        <div class="col-md-12 text-md-center">
            <h1>Resend email confirmation</h1>
            <h2>Enter your email.</h2>
        </div>
    </div>
    <div class="card-body">
        <div class="row justify-content-center">
            <div class="col-md-4">
                <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control" aria-required="true" placeholder="name@example.com" />
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">
                        <i class="bi bi-send"></i> Resend
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <ErrorMessage Message="@errorMessage" />
}
else if (!string.IsNullOrEmpty(infoMessage))
{
    <InfoMessage Message="@infoMessage" />
}
else if (!string.IsNullOrEmpty(successMessage))
{
    <SuccessMessage Message="@successMessage" />
}



@code {
    private string? infoMessage = "";
    private string? errorMessage = "";
    private string? successMessage = "";
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email!);
        if (user is null)
        {
            errorMessage = "User can not be found.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
        if (user.EmailConfirmed == true)
        {
            infoMessage = "Account has been already confirmed.";
        }
        else
        {
            var body = $@"Good day {user.Name} {user.Surname},<br><br>
                       Please click this link to confirm your email:<br>
                       <a href = '{callbackUrl}'> Confirm Email </a>";
            //Sending email
            await emailService.SendEmailAsync(user.Email ?? "","Confirm email",body);

            successMessage = "Verification email sent. Please check your email.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
