@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using LoanApplictationApp.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using LoanApplictationApp.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@*This is for User roles*@
@inject RoleManager<IdentityRole> RoleManager

@inject IdentityContext db;
@*Service to send email*@
@inject Services.SmtpEmailSender emailService
<PageTitle>Register</PageTitle>
<div class="card small-box">
    <div class="card-header heading-form">
        <p>Register</p>
    </div>
    <div class="card-body" style="font-size:small">
        <section>
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                @*  <ValidationSummary class="validation-msg-font"role="alert" /> *@
                <div class="form-floating mb-2">
                    <InputText @bind-Value="Input.Name" class="form-control" autocomplete="username" aria-required="true" placeholder="Lizo" />
                    <label for="name">Name</label>
                    <ValidationMessage For="() => Input.Name" class="validation-msg-font" />
                </div>
                <div class="form-floating mb-2">
                    <InputText @bind-Value="Input.Surname" class="form-control" autocomplete="username" aria-required="true" placeholder="Zizwe" />
                    <label for="surname">Surname</label>
                    <ValidationMessage For="() => Input.Surname" class="validation-msg-font" />
                </div>
                <div class="form-floating mb-2" hidden>
                    <InputSelect @bind-Value="Input.Role" class="form-control" aria-required="true" placeholder="role">
                        <option value="App User">Select a role</option>
                        @foreach (var role in Roles)
                        {
                            <option value="@role">@role</option>
                        }
                    </InputSelect>
                    <label for="Role">Role</label>
                    <ValidationMessage For="() => Input.Role" class="validation-msg-font" />
                </div>
                <div class="form-floating mb-2">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="validation-msg-font"/>
                </div>
                <div class="form-floating mb-2">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="validation-msg-font"/>
                </div>
                <div class="form-floating mb-2">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="validation-msg-font"/>
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-dark">
                    <i class="bi bi-pencil"></i> Register
                </button>
                <div class="mt-2 text-center">
                    <p>
                        Already have an account?
                        <a href="Account/Login">Log in</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private List<string?> Roles = new();

    protected override async Task  OnInitializedAsync()
    {
        Roles = await RoleManager.Roles.Select(x => x.Name).Distinct().ToListAsync();
    }
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    // public async Task RegisterUser(EditContext editContext)
    // {
    //     var user = CreateUser();
    //     user.Name = Input.Name;
    //     user.Surname = Input.Surname;

    //     await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
    //     var emailStore = GetEmailStore();
    //     await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
    //     var result = await UserManager.CreateAsync(user, Input.Password);

    //     //This is for roles
    //     // var role = new IdentityRole(Input.Role);
    //     // if (!await RoleManager.RoleExistsAsync(Input.Role))
    //     // {
    //     //     var AddRoleToDb = await RoleManager.CreateAsync(role);
    //     // }

    //     var AsignRoleToUser = await UserManager.AddToRoleAsync(user, Input.Role);
    //     if (!result.Succeeded)
    //     {
    //         identityErrors = result.Errors;
    //         return;
    //     }

    //     Logger.LogInformation("User created a new account with password.");

    //     var userId = await UserManager.GetUserIdAsync(user);
    //     var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
    //     code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
    //     var callbackUrl = NavigationManager.GetUriWithQueryParameters(
    //         NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
    //         new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

    //     await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

    //     if (UserManager.Options.SignIn.RequireConfirmedAccount)
    //     {
    //         RedirectManager.RedirectTo(
    //             "Account/RegisterConfirmation",
    //             new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
    //     }

    //     await SignInManager.SignInAsync(user, isPersistent: false);
    //     RedirectManager.RedirectTo(ReturnUrl);
    // }
    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.Name = Input.Name;
        user.Surname = Input.Surname;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);
        Input.Role = "App User";
        var AsignRoleToUser = await UserManager.AddToRoleAsync(user, Input.Role);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        //Sending email
        var body = $@"Good day {user.Name} {user.Surname},<br><br>
                       Please click this link to confirm your email:<br>
                       <a href = '{callbackUrl}'> Confirm Email </a>";
        var subject = "Confirm Email";
        await emailService.SendEmailAsync(Input.Email, subject, body);

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }


    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required (ErrorMessage ="Name is required.")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Surname is required.")]
        public string? Surname { get; set; }

        [Required (ErrorMessage ="Role is required.")]
        public string? Role { get; set; }
    }
}
