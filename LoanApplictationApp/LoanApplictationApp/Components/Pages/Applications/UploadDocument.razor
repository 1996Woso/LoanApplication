@page "/upload-document"
@using LoanApplictationApp.Models.DTO.Document
@rendermode InteractiveServer
@inject IDocumentService documentService
@inject NavigationManager NavigationManager
@attribute [Authorize]


<style>
	.custom-file-input {
	opacity: 0;
	position: absolute;
	z-index: -1;
	}

	.custom-file {
	position: relative;
	display: inline-block;
	width: 100%;
	}

	.custom-file-label {
	background-color: #fff;
	border: 1px solid #ccc;
	padding: 10px;
	cursor: pointer;
	display: inline-block;
	text-align: center;
	width: 100%;
	color: #333;
	}
	.custom-file-label i {
	margin-right: 8px;
	}

	.custom-file-label:hover {
	background-color: #f8f9fa;
	}
	.form-select{
	height: 2.9rem !important;
	border: 1px solid #ccc !important;
	border-radius: 0px !important;
	}
</style>


<div class="card">
	<div class="card-header heading-form" style="height:0rem !important;">
		<p>
			Add documents to your application
		</p>
	</div>
	<div class="card-body">
		<hr />
		@if (!string.IsNullOrEmpty(message.Info))
		{
			<InfoMessage Message="@message.Info" IsDivDisplayed="@isDisplyed" />
		}
		@if (!string.IsNullOrEmpty(message.Success))
		{
			<SuccessMessage Message="@message.Success" IsDivDisplayed="@isDisplyed" />
		}
		@if (!string.IsNullOrEmpty(message.Error))
		{
			<ErrorMessage Message="@message.Error" IsDivDisplayed="@isDisplyed" />
		}
		<br />
		<EditForm Model="model" OnValidSubmit="UploadFile" FormName="UploadFile">
			<DataAnnotationsValidator/>
			<div class="row">
				<div class="col-md-6 mb-3">
					<label>
						Document Type
					</label>
				</div>
				<div class="col-md-6 mb-3">
					<InputSelect @bind-Value="model.DocumentType" class="form-control form-select">
						<option value="">
							<b>---------- Select ---------- </b>
						</option>
						@foreach(var docType in docTypes)
						{
							<option value ="@docType">@docType</option>
						}
					</InputSelect>
					<ValidationMessage For="()=> model.DocumentType"/>
				</div>
				<div class="col-md-6 mb-3">
					<label>
						Upload Document
					</label>
				</div>
				<div class="col-md-6 mb-3">
					<div class="custom-file">
						<InputFile id="fileUpload" class="custom-file-input" OnChange="HandleFile" />
						<label class="custom-file-label" for="fileUpload" style="font-weight:initial !important">
							<i class="bi bi-file-earmark-image fs-6"></i> @selectedFileName
						</label>
					</div>
					<ValidationMessage For="()=> model.File"/>
				</div>
			</div>
			<hr />
			<a class="btn btn-danger" style="width:10rem;" @onclick="CancelUpload">Cancel</a>
			<button class="btn btn-dark" style="width:10rem;">@buttonText</button>

		</EditForm>
	</div>
</div>


@code {
	private DocumentUploadRequestDTO model = new();
	private FileMessage message = new();
	private IBrowserFile file;
	private List<string> docTypes = new();
	private string buttonText = "Save";
	private string selectedFileName = "Browse";
	private bool isDisplyed = false;
	[Parameter]
	public string ReturnUrl { get; set; } = "/user-applications";
	protected override async Task OnInitializedAsync()
	{
		docTypes = (await documentService.DocumentTypesAsync()).ToList();
	}

	private async void HandleFile(InputFileChangeEventArgs e)
	{
		file = e.File;
		if(file != null)
		{
			model.File = await documentService.ConvertToIFormFile(file);
			selectedFileName = file.Name;
			StateHasChanged();
		}
	}

	private async Task UploadFile()
	{
		buttonText = "Uploading...";
		await Task.Delay(2000);
		StateHasChanged();

		message = await documentService.UploadAsync(file,model.DocumentType.ToString());
		isDisplyed = true;
		buttonText = "Save";
		StateHasChanged();
		await Task.Delay(7000);// 5000ms = 5s
		isDisplyed = false;
		if(!string.IsNullOrEmpty(message.Success))
		{
			await CancelUpload();
		}
	

	}
	private async Task CancelUpload()
	{
		await Task.Delay(1);
		NavigationManager.NavigateTo($"{ReturnUrl}",forceLoad: true);
	}
}
