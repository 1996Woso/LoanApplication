@page "/user-documents"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@rendermode InteractiveServer
@inject IDocumentService documentService
@inject NavigationManager NavigationManager
@inject IUserService userService
@attribute [Authorize]

<style>
	span{
		left: 0 !important;
	}
</style>
<div class="card" style="border:none !important;">
	<div class="card-header heading-form" style="height:0rem !important;">
		<p>Uploaded Documents</p>
	</div>
	<div class="card-body">
		<hr />
		@if (documents.Count() > 0)
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Document Name</th>
                        <th>Type</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var document in documents)
                    {
                        <tr>
                            <td>@document.FileName</td>
                            <td>@document.DocumentType</td>
                            <td>
                                <div class="hover-btn">
                                    <button class="btn" @onclick="() => HandleDelete(document.Id)">
                                        <i class="bi bi-trash" style="color:red;"></i>
                                    </button>
                                    <span>Delete</span>
                                </div>
                                &nbsp;&nbsp;
                                <div class="hover-btn">
                                    <button class="btn hover-btn">
                                        <i class="bi bi-recycle" style="color:forestgreen;"></i>
                                    </button>
                                    <span>Replace</span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        @if(documents.Count() < 1)
        {
            <p >
                <i class="bi bi-trash2"></i> <span class="text-danger">No documents uploaded!</span>
            </p>
        }
    </div>
</div>

@code {
    public List<DocumentDTO>? documents = new();
    private ApplicationUser? User;
    private bool isDeleted = false;

    [Parameter]
    public List<DocumentDTO>? Documents {get; set;} = new();
    protected override async Task OnInitializedAsync()
    {

        User = await userService.GetCurrentUserAsync();
        
    }

	protected override async Task OnParametersSetAsync()
	{
        if (User != null)
        {
            documents = (await documentService.GetUserDocumentsAsync(User.Id)).ToList();
        }
        else if(Documents.Count() > 0)
        {
            documents = Documents;
        }
        else
        {
            documents = null;
        }
        // documents = Documents ?? new List<DocumentDTO>();
	}

	private async Task HandleDelete(Guid id)
	{
		isDeleted = await documentService.DeleteAsync(id);
		if(isDeleted)
		{
            documents = (await documentService.GetUserDocumentsAsync(User.Id)).ToList();
            StateHasChanged();
		}
	}
}
